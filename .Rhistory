#Importing the data
original_data <- read.csv()
#Importing the data
library(tidyverse)
#Load the data
readRDS(file="clean_data.rds")
#Load the data
clean_data <- readRDS(file="clean_data.rds")
#Load the data
clean_data <- readRDS("clean_data.rds")
original_data <- read_csv("blackjack_dataset.csv/blackjack_dataset.csv")
print("done")
#Remove not used features for the online blackjack analysis since in online there is no cards remaining or shoe id....
clean_data <- original_data %>% select(c(-shoe_id,-cards_remaining))
for (col in names(clean_data)) {
if(is.character(clean_data[[col]])) {
clean_data[[col]] <- factor(clean_data[[col]])
}
}
str(clean_data)
#Save the cleaned data to good format.
saveRDS(clean_data, file="clean_data.rds")
print("done")
library(caret)
str(clean_data)
max(clean_data$win)
clean_data <- clean_data %>% filter(win != 0)
str(clean_data)
#Data wrangling to make win binary
clean_data <- clean_data %>% filter(win != 0) %>% ifelse(win > 0,1,0)
clean_data <- clean_data %>% ifelse(win > 0,1,0)
clean_data <- clean_data %>% mutate(win = ifelse(win > 0,1,0)))
clean_data <- clean_data %>% mutate(win = ifelse(win > 0,1,0))
str(clean_data)
#Save the cleaned data to good format.
saveRDS(clean_data, file="clean_data.rds")
print("done")
#Load the data and splitting the data
clean_data <- readRDS(file="clean_data.rds")
str(clean_data)
test_index <- createDataPartition(y=clean_data$win, times=1,p=0.2,list=FALSE)
#Importing the data
library(tidyverse)
library(caret)
set.seed(123)
test_index <- createDataPartition(y=clean_data$win, times=1,p=0.2,list=FALSE)
training_set <- clean_data[-test_index,]
validation_set <- clean_data[test_index,]
#Data visualization part
str(training_set)
ggplot(training_data, aes(x=dealer_up)) +
geom_histogram(binwidth=1, fill="blue", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of dealer_up", x="Value of dealer_up", y="Count")
ggplot(training_set, aes(x=dealer_up)) +
geom_histogram(binwidth=1, fill="blue", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of dealer_up", x="Value of dealer_up", y="Count")
ggplot(training_set, aes(x=as.factor(win), y=dealer_up)) +
geom_boxplot(fill="blue", alpha=0.7) +
theme_minimal() +
labs(title="Boxplot of dealer_up by win status", x="Win Status", y="Value of dealer_up")
print("done")
library(corrplot)
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
numeric_data <- training_set %>% select(dealer_up, run_count, true_count, win)
correlation_matrix <- cor(numeric_data)
ggcorrplot(correlation_matrix, hc.order = TRUE, type="lower")
ggplot(training_set, aes(x=player_final_value, fill=as.factor(win))) +
geom_bar(position="dodge") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title="Player's Final Value vs. Win Rate", x="Player's Final Value", y="Count")
print("done")
str(training_set)
as.numeric(clean_data$player_final_value)
str(clean_data)
original_data <- read_csv("blackjack_dataset.csv/blackjack_dataset.csv")
str(original_data)
#Do some data wrangling
original_data$dealer_final_value <- as.numeric(original_data$dealer_final_value)
str(original_data)
original_data$player_final_value <- as.numeric(original_data$player_final_value)
str(original_data)
#Checking if there is NA.
sum(is.na(original_data$player_final_value))
original_data <- read_csv("blackjack_dataset.csv/blackjack_dataset.csv")
str(original_data)
print("done")
#Do some data wrangling
original_data$dealer_final_value <- as.numeric(original_data$dealer_final_value)
#Checking if there is NA.
sum(is.na(original_data$dealer_final_value))
print("done")
original_data <- read_csv("blackjack.csv")
View(original_data)
#Checking if there is NA.
sum(is.na(original_data))
for (col in names(clean_data)) {
if(is.character(clean_data[[col]])) {
clean_data[[col]] <- factor(clean_data[[col]])
}
}
str(original_data)
#Data wrangling to make win binary
clean_data <- factorme(original_data)
factorme <- function(data){
for (col in names(data)) {
if(is.character(data[[col]])) {
data[[col]] <- factor(data[[col]])
}
}
}
#Data wrangling to make win binary
clean_data <- factorme(original_data)
#Data wrangling to make win binary
clean_data <- orginal_data %>% factorme()
factorme <- function(data){
for (col in names(data)) {
if(is.character(data[[col]])) {
data[[col]] <- factor(data[[col]])
}
}
return(data)
}
factorme <- function(data){
for (col in names(data)) {
if(is.character(data[[col]])) {
data[[col]] <- factor(data[[col]])
}
}
return(data)
}
original_data <- read_csv("blackjack.csv")
#Data wrangling to make win binary
clean_data <- factorme(original_data)
str(clean_data)
#Save the cleaned data to good format.
saveRDS(clean_data, file="clean_data.rds")
#Importing the data
library(tidyverse)
library(caret)
#Machine learning library
library(randomForest)
library(xgboost)
library(ggcorrplot)
library(ggrides)
library(ggriddes)
library(ggridges)
#Load the data and splitting the data
clean_data <- readRDS(file="clean_data.rds")
#splitting the data
set.seed(123)
test_index <- createDataPartition(y=clean_data$winloss, times=1,p=0.2,list=FALSE)
training_set <- clean_data[-test_index,]
validation_set <- clean_data[test_index,]
# For example, visualize the distribution of `sumofcards` for player :
ggplot(training_set, aes(x=sumofcards)) +
geom_histogram(binwidth=1, fill="blue", color="white", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of sumofcards", x="Sum of Cards", y="Frequency")
install.packages("gridExtra")
library(gridExtra)
p1 <- ggplot(training_set, aes(x=sumofcards)) +
geom_histogram(binwidth=1, fill="blue", color="white", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of sumofcards", x="Sum of Cards", y="Frequency")
# For example, visualize the distribution of `sumofdealer` for player :
p2 <- ggplot(training_set, aes(x=sumofdeal)) +
geom_histogram(binwidth=1, fill="red", color="white", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of sumofcards", x="Sum of Cards", y="Frequency")
#Plot the distribution side by side
# Display side by side
grid.arrange(p1, p2, ncol=2)
# For example, for `winloss`:
ggplot(training_set, aes(x=winloss)) +
geom_bar(fill="green", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of winloss", x="Win/Loss", y="Count")
str(clean_data)
#Distribution of plybustbeat
ggplot(training_set, aes(x=plybustbeat)) +
geom_bar(fill="green", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of winloss", x="Win/Loss", y="Count")
#Distribution of dealer bust
ggplot(training_set, aes(x=dlbustbeat)) +
geom_bar(fill="green", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of winloss", x="Win/Loss", y="Count")
#Distribution of plybustbeat
p3 <- ggplot(training_set, aes(x=plybustbeat)) +
geom_bar(fill="green", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of winloss", x="Win/Loss", y="Count")
#Distribution of dealer bust
p4 <- ggplot(training_set, aes(x=dlbustbeat)) +
geom_bar(fill="green", alpha=0.7) +
theme_minimal() +
labs(title="Distribution of winloss", x="Win/Loss", y="Count")
grid.arrange(p3, p4, ncol=1)
library(nnet)
# Assuming your data is already split into 'training_set' and 'validation_set'
# Model 1 : Multinomial logistic regression
model_multinom <- multinom(winloss ~ . - winloss, data = training_set)
# Predicting on the validation set
pred_probs_multinom <- predict(model_multinom, newdata = validation_set, type = "probs")
# Convert probabilities to categories
result_multinom <- apply(pred_probs_multinom, 1, function(row) {
levels(training_set$winloss)[which.max(row)]
})
# Generating confusion matrix
confusionMatrix(factor(result_multinom), validation_set$winloss)
print("done")
training_set <- training_set %>% select(c(card1,dealcard1,winloss))
validation_set <- validation_set %>% select(c(card1,dealcard1,winloss))
# Assuming your data is already split into 'training_set' and 'validation_set'
# Model 1 : Multinomial logistic regression
model_multinom <- multinom(winloss ~ . - winloss, data = training_set)
# Predicting on the validation set
pred_probs_multinom <- predict(model_multinom, newdata = validation_set, type = "probs")
# Convert probabilities to categories
result_multinom <- apply(pred_probs_multinom, 1, function(row) {
levels(training_set$winloss)[which.max(row)]
})
# Generating confusion matrix
confusionMatrix(factor(result_multinom), validation_set$winloss)
training_set <- clean_data[-test_index,]
validation_set <- clean_data[test_index,]
training_set <- training_set %>% select(c(card1,card2,dealcard1,winloss))
validation_set <- validation_set %>% select(c(card1,card2,dealcard1,winloss))
# Assuming your data is already split into 'training_set' and 'validation_set'
# Model 1 : Multinomial logistic regression
model_multinom <- multinom(winloss ~ . - winloss, data = training_set)
# Predicting on the validation set
pred_probs_multinom <- predict(model_multinom, newdata = validation_set, type = "probs")
# Convert probabilities to categories
result_multinom <- apply(pred_probs_multinom, 1, function(row) {
levels(training_set$winloss)[which.max(row)]
})
# Generating confusion matrix
confusionMatrix(factor(result_multinom), validation_set$winloss)
#RANDOM FOREST -------------------------------------------
# Train a Random Forest model
set.seed(123)
model_rf <- randomForest(winloss ~ . - winloss, data=training_set, ntree=100, mtry=5, importance=TRUE)
# Predicting on the validation set
result_rf <- predict(model_rf, newdata=validation_set)
# Generating confusion matrix
cm_rf <- confusionMatrix(factor(result_rf), validation_set$winloss)
print(cm_rf)
View(training_set)
card1_value <- 5
card2_value <- 10
dealcard1 <- 9
# Create a data frame with these inputs
new_data <- data.frame(card1 = card1_value, card2 = card2_value, dealcard1 = dealcard1)
# Get predictions
prediction <- predict(model_rf, newdata=new_data)
# Print prediction
cat("The prediction for the given input is:", prediction, "\n")
# Translate factor level to human-readable format
prediction_label <- levels(validation_set$winloss)[prediction]
# Print prediction
cat("The prediction for the given input is:", prediction, "\n")
# Print prediction
cat("The prediction for the given input is:", prediction_label, "\n")
card1_value <- 6
card2_value <- 6
dealcard1 <- 3
# Create a data frame with these inputs
new_data <- data.frame(card1 = card1_value, card2 = card2_value, dealcard1 = dealcard1)
# Get predictions
prediction <- predict(model_rf, newdata=new_data)
# Translate factor level to human-readable format
prediction_label <- levels(validation_set$winloss)[prediction]
# Print prediction
cat("The prediction for the given input is:", prediction_label, "\n")
card1_value <- 7
card2_value <- 10
dealcard1 <- 7
# Create a data frame with these inputs
new_data <- data.frame(card1 = card1_value, card2 = card2_value, dealcard1 = dealcard1)
# Get predictions
prediction <- predict(model_rf, newdata=new_data)
# Translate factor level to human-readable format
prediction_label <- levels(validation_set$winloss)[prediction]
# Print prediction
cat("The prediction for the given input is:", prediction_label, "\n")
card1_value <- 9
card2_value <- 10
dealcard1 <- 8
# Create a data frame with these inputs
new_data <- data.frame(card1 = card1_value, card2 = card2_value, dealcard1 = dealcard1)
# Get predictions
prediction <- predict(model_rf, newdata=new_data)
# Translate factor level to human-readable format
prediction_label <- levels(validation_set$winloss)[prediction]
# Print prediction
cat("The prediction for the given input is:", prediction_label, "\n")
save(model_rf, file="random_forest_model.RData")
